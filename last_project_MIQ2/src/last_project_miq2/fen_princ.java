/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package last_project_miq2;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;


public class fen_princ extends javax.swing.JFrame {
    
String ajouteFigure="";
EnsembleFigure ensembleFigure = new EnsembleFigure() ;
int test =0;
private ArrayList<Point> pointArrayList = new ArrayList<>();
private ArrayList<Point> pointArrayList1 = new ArrayList<>();
private ArrayList<Segment> SegArr = new ArrayList<>();
private ArrayList<Rectangle> RectArr = new ArrayList<>();
private ArrayList<Cercle> CercArr = new ArrayList<>();
private EnsembleFigure trseg = new EnsembleFigure();
Point ptest=new Point(200,200);

    public void ensembleFigureAdd(double X,double Y,String ID){
        this.ensembleFigure.add(new Point (X,Y,ID));
    }
    public fen_princ() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        displayPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        Ajouter = new javax.swing.JMenu();
        click = new javax.swing.JRadioButtonMenuItem();
        Point = new javax.swing.JMenuItem();
        Segment = new javax.swing.JMenuItem();
        Rectangle = new javax.swing.JMenuItem();
        Triangle = new javax.swing.JMenuItem();
        Cercle = new javax.swing.JMenuItem();
        Polygone = new javax.swing.JMenuItem();
        Polyligne = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayPanel.setBackground(new java.awt.Color(255, 255, 255));
        displayPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                displayPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                displayPanelMouseMoved(evt);
            }
        });
        displayPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayPanelMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                displayPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                displayPanelMouseReleased(evt);
            }
        });
        displayPanel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                displayPanelKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1900, Short.MAX_VALUE)
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1000, Short.MAX_VALUE)
        );

        jMenuBar1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jMenuBar1KeyPressed(evt);
            }
        });

        jMenu1.setText("Fichier");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editer");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Zoom");
        jMenuBar1.add(jMenu3);

        Ajouter.setText("Ajouter");
        Ajouter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AjouterActionPerformed(evt);
            }
        });

        click.setSelected(true);
        click.setText("click");
        Ajouter.add(click);

        Point.setText("Point");
        Point.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointActionPerformed(evt);
            }
        });
        Ajouter.add(Point);

        Segment.setText("Segment");
        Segment.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                SegmentMouseMoved(evt);
            }
        });
        Segment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SegmentActionPerformed(evt);
            }
        });
        Ajouter.add(Segment);

        Rectangle.setText("Rectangle");
        Rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RectangleActionPerformed(evt);
            }
        });
        Ajouter.add(Rectangle);

        Triangle.setText("Triangle");
        Triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TriangleActionPerformed(evt);
            }
        });
        Ajouter.add(Triangle);

        Cercle.setText("Cercle");
        Cercle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CercleActionPerformed(evt);
            }
        });
        Ajouter.add(Cercle);

        Polygone.setText("Polygone");
        Polygone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PolygoneActionPerformed(evt);
            }
        });
        Ajouter.add(Polygone);

        Polyligne.setText("Polyligne");
        Polyligne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PolyligneActionPerformed(evt);
            }
        });
        Ajouter.add(Polyligne);

        jMenuBar1.add(Ajouter);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(displayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PointActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointActionPerformed
        ajouteFigure="Point";
        pointArrayList.clear();
        if(!click.isSelected()){
            Coord coord =new Coord();
            coord.setVisible(true); 
            ensembleFigure.add(coord.p);
        }
        System.out.println(ensembleFigure.getAll());
        
    }//GEN-LAST:event_PointActionPerformed

    private void CercleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CercleActionPerformed
        ajouteFigure="Cercle";
        pointArrayList.clear();
    }//GEN-LAST:event_CercleActionPerformed

    private void displayPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseReleased
        
               
                
        switch (ajouteFigure) {
            case "Point":
                ensembleFigure.add(new Point(evt.getX(), evt.getY()));
                ensembleFigure.paint(displayPanel);
                break;
            case "Segment":
                 Point p = new Point(evt.getX(), evt.getY());
                 pointArrayList1.add(p);
                

                break;
            case "Rectangle":
                pointArrayList1.add(new Point(evt.getX(), evt.getY()));
                if (pointArrayList.size() == 2) {
                    ensembleFigure.add(new Rectangle(pointArrayList.get(0), pointArrayList.get(1)));
                    pointArrayList.clear();
                }
                break;
            case "Triangle":
                pointArrayList.add(new Point(evt.getX(), evt.getY()));
                if (pointArrayList.size() == 3) {
                    ensembleFigure.add(new Triangle(pointArrayList.get(0), pointArrayList.get(1), pointArrayList.get(2)));
                    pointArrayList.clear();
                }
                break;
            case "Cercle":
                pointArrayList1.add(new Point(evt.getX(), evt.getY()));
                if (pointArrayList.size() == 2) {
                    ensembleFigure.add(new Cercle(pointArrayList.get(0), pointArrayList.get(1)));
                    pointArrayList.clear();
                }
                break;
            case "Polygone":
                pointArrayList.add(new Point(evt.getX(), evt.getY()));
                break;
            case "Polyligne":
                pointArrayList.add(new Point(evt.getX(), evt.getY()));
                break;
            default:
                return;

        }
         
        ensembleFigure.paint(displayPanel);
         
       

    
    }//GEN-LAST:event_displayPanelMouseReleased

    private void TriangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TriangleActionPerformed
         ajouteFigure="Triangle";
         pointArrayList.clear();
    }//GEN-LAST:event_TriangleActionPerformed

    private void SegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SegmentActionPerformed
         ajouteFigure="Segment";
         
         pointArrayList.clear();
         
    }//GEN-LAST:event_SegmentActionPerformed

    private void RectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RectangleActionPerformed
         ajouteFigure="Rectangle";
         pointArrayList.clear();
    }//GEN-LAST:event_RectangleActionPerformed

    private void PolygoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PolygoneActionPerformed
        ajouteFigure="Polygone";
        pointArrayList.clear();
        
    }//GEN-LAST:event_PolygoneActionPerformed

    private void AjouterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AjouterActionPerformed
     
    }//GEN-LAST:event_AjouterActionPerformed

    private void jMenuBar1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jMenuBar1KeyPressed
       
    }//GEN-LAST:event_jMenuBar1KeyPressed

    private void displayPanelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_displayPanelKeyPressed
       
    }//GEN-LAST:event_displayPanelKeyPressed

    private void PolyligneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PolyligneActionPerformed
        ajouteFigure="Polyligne";
        pointArrayList.clear();
    }//GEN-LAST:event_PolyligneActionPerformed

    private void displayPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseMoved
        switch(ajouteFigure){
            case "Segment":
                   if(pointArrayList1.size()==2){
                       Segment s1 = new Segment(pointArrayList1.get(0),pointArrayList1.get(1));
                       s1.paint(displayPanel);
                       ensembleFigure.add(s1);
                       pointArrayList1.clear();
                   }
                   if(pointArrayList1.size()==1){
                   Graphics graphics2D = displayPanel.getGraphics();
                   graphics2D.setColor(Color.WHITE);
                   Point p =new Point(evt.getX(), evt.getY());
                   Segment s = new Segment(pointArrayList1.get(0),p);
                   SegArr.add(s);
                   SegArr.get(0).depaint(displayPanel);
                   s.paint(displayPanel);
                        if(SegArr.size()==2){
                            SegArr.remove(0);
                        }
                   }
                    
            break;
            
            case "Rectangle":
                if(pointArrayList1.size()==2){
                       Rectangle r = new Rectangle(pointArrayList1.get(0),pointArrayList1.get(1));
                       r.paint(displayPanel);
                       ensembleFigure.add(r);
                       pointArrayList1.clear();
                   }

                if(pointArrayList1.size()==1){
                   Point p =new Point(evt.getX(), evt.getY());
                   Rectangle r1 = new Rectangle(pointArrayList1.get(0),p);
                   RectArr.add(r1);
                   RectArr.get(0).depaint(displayPanel);
                   r1.paint(displayPanel);
                        if(RectArr.size()==2){
                            RectArr.remove(0);
                        }
                   }
             break;
            case "Cercle":
                if(pointArrayList1.size()==2){
                       Cercle c = new Cercle(pointArrayList1.get(0),pointArrayList1.get(1));
                       c.paint(displayPanel);
                       ensembleFigure.add(c);
                       pointArrayList1.clear();
                   }
                if(pointArrayList1.size()==1){
                   Point p =new Point(evt.getX(), evt.getY());
                   Cercle c1 = new Cercle(pointArrayList1.get(0),p);
                   CercArr.add(c1);
                   CercArr.get(0).depaint(displayPanel);
                   c1.paint(displayPanel);
                        if(CercArr.size()==2){
                            CercArr.remove(0);
                        }
                     
                   }
             break;
        }
       ensembleFigure.paint(displayPanel);
                
    }//GEN-LAST:event_displayPanelMouseMoved

    private void SegmentMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SegmentMouseMoved
        
    }//GEN-LAST:event_SegmentMouseMoved

    private void displayPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseDragged
        
    }//GEN-LAST:event_displayPanelMouseDragged

    private void displayPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMousePressed
        
    }//GEN-LAST:event_displayPanelMousePressed

    private void displayPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayPanelMouseClicked
        
    }//GEN-LAST:event_displayPanelMouseClicked
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fen_princ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fen_princ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fen_princ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fen_princ.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
             fen_princ mafenetre =  new fen_princ();
             mafenetre.setVisible(true);
             mafenetre.setTitle("Graphique2D");
             mafenetre.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                mafenetre.thisKeyPressed(e);
            }
        });
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Ajouter;
    private javax.swing.JMenuItem Cercle;
    private javax.swing.JMenuItem Point;
    private javax.swing.JMenuItem Polygone;
    private javax.swing.JMenuItem Polyligne;
    private javax.swing.JMenuItem Rectangle;
    private javax.swing.JMenuItem Segment;
    private javax.swing.JMenuItem Triangle;
    private javax.swing.JRadioButtonMenuItem click;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    // End of variables declaration//GEN-END:variables

   private void thisKeyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER && ajouteFigure.equals("Polygone")) {
            ensembleFigure.add(new Polygone(pointArrayList));
            pointArrayList.clear();
            
        }
        
        if (e.getKeyCode() == KeyEvent.VK_ENTER && ajouteFigure.equals("Polyligne")) {
            ensembleFigure.add(new Polyligne(pointArrayList));
            pointArrayList.clear();
           
        }
        ensembleFigure.paint(displayPanel);

    
          
    }

}
